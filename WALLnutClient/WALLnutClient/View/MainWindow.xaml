<Window x:Class="WALLnutClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WALLnutClient"
        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        mc:Ignorable="d"
        WindowStartupLocation="CenterScreen" 
        WindowStyle="None" AllowsTransparency="True" ResizeMode="CanMinimize"
        SnapsToDevicePixels="True" UseLayoutRounding="True"
        Title="WALLnut" Height="500" Width="900">

    <Window.Resources>
        <local:TypeToVisibilityConverter x:Key="TypeToVisibilityConverter" />
        
        <Style TargetType="{x:Type Border}" x:Key="WindowHeader">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="BtnGoBack" BasedOn="{StaticResource wBtnBase}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" SnapsToDevicePixels="True" CornerRadius="4" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Border x:Name="border_inner" BorderThickness="1" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}">
                                <Image x:Name="xClose" Width="50" Height="32" Source="/Resources/go-back.png" Stretch="Fill" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource btnBorderOver}"/>
                                <Setter Property="BorderBrush" TargetName="border_inner" Value="{DynamicResource btnBorderInOver}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource btnBorderPressed}"/>
                                <Setter Property="BorderBrush" TargetName="border_inner" Value="{DynamicResource btnBorderInPressed}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>


    <local:WindowRoot x:Name="windowRoot">
        <local:ModuleDescription ModuleType="{x:Type local:MainContainerViewModel}" ViewType="{x:Type local:MainContainerView}" Paramater="{Binding }" />
        <local:ModuleDescription ModuleType="{x:Type local:MainViewModel}" ViewType="{x:Type local:MainView}" />
        <local:ModuleDescription ModuleType="{x:Type local:FileExplorerViewModel}" ViewType="{x:Type local:FileExplorerView}" />
        <local:ModuleDescription ModuleType="{x:Type local:SettingViewModel}" ViewType="{x:Type local:SettingView}" />
        <local:ModuleDescription ModuleType="{x:Type local:LogHistoryViewModel}" ViewType="{x:Type local:LogHistoryView}" />
        
        <local:WindowRoot.Template>
            <ControlTemplate TargetType="local:WindowRoot">
                <Border BorderBrush="White" CornerRadius="4">
                    <Grid Background="{DynamicResource mainFrameBackgroundColor}" MouseLeftButtonDown="Header_PreviewMouseLeftButtonDown">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border BorderBrush="White" BorderThickness="0,0,0,1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid>
                                <TextBlock Margin="10,0" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" FontWeight="Bold" Foreground="White"
                                           Text="WALLnut" />
                                <Button Margin="5,0" BorderThickness="0" HorizontalAlignment="Right" Style="{StaticResource xBtnClose}"
                                        Command="{Binding MainModule.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Grid>
                        </Border>

                        <Border Grid.Row="1" x:Name="xHeader" Style="{StaticResource WindowHeader}"
                                Visibility="{Binding MainModule.CurrentModuleType, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TypeToVisibilityConverter}, ConverterParameter={x:Type local:MainViewModel}}">
                            <StackPanel Orientation="Horizontal" Height="28" Margin="2">
                                <Button Margin="6,1" Background="Transparent" Style="{StaticResource BtnGoBack}"
                                        Command="{Binding MainModule.ShowMainViewCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                        CommandParameter="{Binding MainModule.Info, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <TextBlock Margin="10,0" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{DynamicResource mainFontColor}" FontWeight="Bold"
                                           Text="{Binding MainModule.CurrentModule.Title, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=CurrentHeader}" />
                            </StackPanel>
                        </Border>

                        <Grid x:Name="Contents" Grid.Row="2" UseLayoutRounding="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <Border>
                                <local:ViewPresenter Content="{Binding MainModule.CurrentModule.View, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Border>

                            <TextBlock Grid.Row="1" Margin="0,0,10,0" Text="{Binding MainModule.ProgramVer, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=버전 : 2017-12-07}" Foreground="{DynamicResource mainFontColor}" HorizontalAlignment="Right" Width="122" Height="26"/>
                        </Grid>
                    </Grid>
                </Border>
                <!--<ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding MainModule.CurrentModuleType, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Type local:FileExplorerViewModel}">
                        <Setter TargetName="xHeader" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </ControlTemplate.Triggers>-->
            </ControlTemplate>
        </local:WindowRoot.Template>
    </local:WindowRoot>
</Window>
